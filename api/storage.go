package api

import (
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
)

type Storage interface {
	CreateAccount(*Account) error
	DeleteAccount(int) error
	UpdateAccount(*Account) error
	GetAccountByID(int) (*Account, error)
	GetAccounts() ([]*Account, error)
}

type PostgresStore struct {
	db *sql.DB
}

func NewPostgresStore() (*PostgresStore, error) {
	connStr := "postgres://postgres:changeit@localhost:5434/postgres?sslmode=disable"
	db, err := sql.Open("postgres", connStr)

	if err != nil {
		return nil, err
	}

	if err := db.Ping(); err != nil {
		return nil, err
	}

	return &PostgresStore{
		db: db,
	}, nil
}

func (s *PostgresStore) Init() error {
	return s.createAccountTable()
}

func (s *PostgresStore) createAccountTable() error {

	query := `CREATE TABLE IF NOT EXISTS "account" (
		  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY
		, "first_name" VARCHAR(100) NOT NULL
		, "last_name" VARCHAR(100) NOT NULL
		, "number" BIGINT NOT NULL
		, "balance" BIGINT NOT NULL
		, "created_at" TIMESTAMP(3)       NOT NULL DEFAULT NOW()
		, "updated_at" TIMESTAMP(3)
	)`

	_, err := s.db.Exec(query)

	return err
}

func (s *PostgresStore) CreateAccount(acc *Account) error {

	query := `INSERT INTO "account"
	("first_name", "last_name", "number", "balance") VALUES
	($1, $2, $3, $4)`

	resp, err := s.db.Query(query, acc.FirstName, acc.LastName, acc.Number, acc.Balance)
	if err != nil {
		return err
	}
	defer resp.Close()

	fmt.Printf("%+v\n", resp)

	return nil
}

func (s *PostgresStore) UpdateAccount(*Account) error {
	return nil
}

func (s *PostgresStore) DeleteAccount(int) error {
	return nil
}

func (s *PostgresStore) GetAccountByID(int) (*Account, error) {
	return nil, nil
}

func (s *PostgresStore) GetAccounts() ([]*Account, error) {
	rows, err := s.db.Query(`
		SELECT
			  "id"
			, "first_name"
			, "last_name"
			, "number"
			, "balance"
			, "created_at"
			, "updated_at"
		FROM "account"`)
	if err != nil {
		return nil, err
	}
	defer rows.Close() // Close the rows at the end to release resources

	accounts := []*Account{}
	for rows.Next() {
		account := new(Account)

		fmt.Println("Looping through")

		if err := rows.Scan(
			&account.ID,
			&account.FirstName,
			&account.LastName,
			&account.Number,
			&account.Balance,
			&account.CreatedAt,
			&account.UpdatedAt,
		); err != nil {
			return nil, err
		}

		accounts = append(accounts, account)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	return accounts, nil
}
